# Generated by Django 5.2.3 on 2025-06-16 09:15

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Donation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('donor_name', models.CharField(max_length=255)),
                ('donor_email', models.EmailField(max_length=254)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('payment_method', models.CharField(choices=[('card', 'Credit/Debit Card'), ('paypal', 'PayPal'), ('bank_transfer', 'Bank Transfer'), ('goodcollective', 'GoodCollective Wallet')], max_length=20)),
                ('purpose', models.CharField(choices=[('general', 'General Support'), ('trees', 'Tree Planting'), ('water_conservation', 'Water Conservation'), ('education', 'Educational Materials'), ('technology', 'Technology Access')], default='general', max_length=50)),
                ('recipient_name', models.CharField(blank=True, max_length=255, null=True)),
                ('send_ecard', models.BooleanField(default=False)),
                ('recipient_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('message', models.TextField(blank=True, null=True)),
                ('payment_id', models.CharField(blank=True, max_length=255, null=True)),
                ('payment_status', models.CharField(default='pending', max_length=50)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255)),
                ('short_description', models.CharField(max_length=250)),
                ('detailed_description', models.TextField()),
                ('cover_image', models.ImageField(blank=True, null=True, upload_to='project_covers/')),
                ('environmental_themes', models.JSONField(default=list)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('is_open_for_collaboration', models.BooleanField(default=True)),
                ('goals', models.JSONField(default=list)),
                ('offer_rewards', models.BooleanField(default=False)),
                ('recognition_type', models.CharField(blank=True, max_length=100, null=True)),
                ('award_criteria', models.TextField(blank=True, null=True)),
                ('certificate_template', models.FileField(blank=True, null=True, upload_to='certificates/')),
                ('badge_image', models.ImageField(blank=True, null=True, upload_to='badges/')),
                ('contact_person_name', models.CharField(max_length=255)),
                ('contact_person_email', models.EmailField(max_length=254)),
                ('contact_person_role', models.CharField(max_length=100)),
                ('contact_country', models.CharField(max_length=100)),
                ('contact_city', models.CharField(max_length=100)),
                ('supporting_files', models.JSONField(default=list)),
                ('media_files', models.JSONField(default=list)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('pending_approval', 'Pending Approval'), ('active', 'Active'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='draft', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('overview', models.TextField(blank=True, null=True)),
                ('institution_type', models.CharField(choices=[('primary', 'Primary School'), ('secondary', 'Secondary School'), ('high_school', 'High School'), ('university', 'University'), ('college', 'College'), ('academy', 'Academy'), ('other', 'Other')], max_length=50)),
                ('affiliation', models.CharField(choices=[('government', 'Government'), ('private', 'Private'), ('semi_private', 'Semi-Private'), ('ngo', 'NGO'), ('international', 'International')], max_length=50)),
                ('registration_number', models.CharField(max_length=100, unique=True)),
                ('year_of_establishment', models.IntegerField(validators=[django.core.validators.MinValueValidator(1800), django.core.validators.MaxValueValidator(2025)])),
                ('address_line_1', models.CharField(max_length=255)),
                ('address_line_2', models.CharField(blank=True, max_length=255, null=True)),
                ('city', models.CharField(max_length=100)),
                ('state', models.CharField(max_length=100)),
                ('postal_code', models.CharField(max_length=20)),
                ('country', models.CharField(max_length=100)),
                ('phone_number', models.CharField(max_length=20)),
                ('email', models.EmailField(max_length=254)),
                ('website', models.URLField(blank=True, null=True)),
                ('principal_name', models.CharField(max_length=255)),
                ('principal_email', models.EmailField(max_length=254)),
                ('principal_phone', models.CharField(max_length=20)),
                ('number_of_students', models.PositiveIntegerField(default=0)),
                ('number_of_teachers', models.PositiveIntegerField(default=0)),
                ('medium_of_instruction', models.CharField(choices=[('english', 'English'), ('local_language', 'Local Language'), ('bilingual', 'Bilingual'), ('multilingual', 'Multilingual')], max_length=50)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='school_logos/')),
                ('is_verified', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='ProjectParticipation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('contribution_description', models.TextField(blank=True, null=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.project')),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.school')),
            ],
            options={
                'unique_together': {('project', 'school')},
            },
        ),
        migrations.AddField(
            model_name='project',
            name='lead_school',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='led_projects', to='core.school'),
        ),
        migrations.AddField(
            model_name='project',
            name='participating_schools',
            field=models.ManyToManyField(related_name='projects', through='core.ProjectParticipation', to='core.school'),
        ),
        migrations.CreateModel(
            name='EnvironmentalImpact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('impact_type', models.CharField(choices=[('trees_planted', 'Trees Planted'), ('waste_recycled', 'Waste Recycled (kg)'), ('water_saved', 'Water Saved (liters)'), ('energy_saved', 'Energy Saved (kWh)'), ('carbon_reduced', 'Carbon Reduced (kg CO2)'), ('students_engaged', 'Students Engaged')], max_length=50)),
                ('value', models.DecimalField(decimal_places=2, max_digits=12)),
                ('unit', models.CharField(max_length=50)),
                ('measurement_date', models.DateField(default=django.utils.timezone.now)),
                ('verified', models.BooleanField(default=False)),
                ('notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='impacts', to='core.project')),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='impacts', to='core.school')),
            ],
        ),
        migrations.CreateModel(
            name='Class',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('description', models.TextField(blank=True, null=True)),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='classes', to='core.school')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('role', models.CharField(choices=[('student', 'Student'), ('teacher', 'Teacher'), ('school_admin', 'School Admin'), ('super_admin', 'Super Admin')], default='student', max_length=20)),
                ('mobile_number', models.CharField(blank=True, max_length=20, null=True)),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other'), ('prefer_not_to_say', 'Prefer not to say')], max_length=20, null=True)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profiles/')),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('address_line_1', models.CharField(blank=True, max_length=255, null=True)),
                ('address_line_2', models.CharField(blank=True, max_length=255, null=True)),
                ('city', models.CharField(blank=True, max_length=100, null=True)),
                ('state', models.CharField(blank=True, max_length=100, null=True)),
                ('postal_code', models.CharField(blank=True, max_length=20, null=True)),
                ('country', models.CharField(blank=True, max_length=100, null=True)),
                ('is_active_user', models.BooleanField(default=True)),
                ('date_joined_school', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='core_users', related_query_name='core_user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='core_users', related_query_name='core_user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='TeacherProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('teacher_role', models.CharField(choices=[('class_teacher', 'Class Teacher'), ('subject_teacher', 'Subject Teacher'), ('admin', 'Admin'), ('coordinator', 'Coordinator')], default='subject_teacher', max_length=20)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('on_leave', 'On Leave')], default='active', max_length=20)),
                ('join_link', models.UUIDField(default=uuid.uuid4, unique=True)),
                ('assigned_classes', models.ManyToManyField(blank=True, related_name='teachers', to='core.class')),
                ('assigned_subjects', models.ManyToManyField(blank=True, related_name='teachers', to='core.subject')),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teachers', to='core.school')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='teacher_profile', to='core.user')),
            ],
        ),
        migrations.CreateModel(
            name='StudentProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('student_id', models.CharField(max_length=50)),
                ('parent_name', models.CharField(blank=True, max_length=255, null=True)),
                ('parent_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('parent_phone', models.CharField(blank=True, max_length=20, null=True)),
                ('enrollment_date', models.DateField(default=django.utils.timezone.now)),
                ('current_class', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.class')),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='students', to='core.school')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='student_profile', to='core.user')),
            ],
        ),
        migrations.AddField(
            model_name='school',
            name='admin',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='managed_schools', to='core.user'),
        ),
        migrations.AddField(
            model_name='project',
            name='created_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_projects', to='core.user'),
        ),
        migrations.CreateModel(
            name='Certificate',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('certificate_type', models.CharField(choices=[('project_completion', 'Project Completion'), ('environmental_impact', 'Environmental Impact'), ('collaboration', 'Cross-School Collaboration'), ('leadership', 'Environmental Leadership'), ('honor', 'Certificate of Honor')], max_length=50)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('template_file', models.FileField(upload_to='certificate_templates/')),
                ('background_color', models.CharField(default='#4ADE80', max_length=7)),
                ('verification_code', models.UUIDField(default=uuid.uuid4, unique=True)),
                ('issued_at', models.DateTimeField(auto_now_add=True)),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.project')),
                ('issued_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='issued_certificates', to='core.user')),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='certificates', to='core.user')),
            ],
        ),
        migrations.CreateModel(
            name='SchoolMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='core.school')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='school_memberships', to='core.user')),
            ],
            options={
                'unique_together': {('user', 'school')},
            },
        ),
    ]
